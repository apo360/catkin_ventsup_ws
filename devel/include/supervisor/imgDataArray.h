// Generated by gencpp from file supervisor/imgDataArray.msg
// DO NOT EDIT!


#ifndef SUPERVISOR_MESSAGE_IMGDATAARRAY_H
#define SUPERVISOR_MESSAGE_IMGDATAARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <supervisor/imgData.h>

namespace supervisor
{
template <class ContainerAllocator>
struct imgDataArray_
{
  typedef imgDataArray_<ContainerAllocator> Type;

  imgDataArray_()
    : images()  {
    }
  imgDataArray_(const ContainerAllocator& _alloc)
    : images(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::supervisor::imgData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::supervisor::imgData_<ContainerAllocator> >::other >  _images_type;
  _images_type images;





  typedef boost::shared_ptr< ::supervisor::imgDataArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::supervisor::imgDataArray_<ContainerAllocator> const> ConstPtr;

}; // struct imgDataArray_

typedef ::supervisor::imgDataArray_<std::allocator<void> > imgDataArray;

typedef boost::shared_ptr< ::supervisor::imgDataArray > imgDataArrayPtr;
typedef boost::shared_ptr< ::supervisor::imgDataArray const> imgDataArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::supervisor::imgDataArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::supervisor::imgDataArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::supervisor::imgDataArray_<ContainerAllocator1> & lhs, const ::supervisor::imgDataArray_<ContainerAllocator2> & rhs)
{
  return lhs.images == rhs.images;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::supervisor::imgDataArray_<ContainerAllocator1> & lhs, const ::supervisor::imgDataArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace supervisor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::supervisor::imgDataArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::supervisor::imgDataArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::supervisor::imgDataArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::supervisor::imgDataArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::supervisor::imgDataArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::supervisor::imgDataArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::supervisor::imgDataArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c469dcd5daa68d701dc4178cb80f86d";
  }

  static const char* value(const ::supervisor::imgDataArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c469dcd5daa68d7ULL;
  static const uint64_t static_value2 = 0x01dc4178cb80f86dULL;
};

template<class ContainerAllocator>
struct DataType< ::supervisor::imgDataArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "supervisor/imgDataArray";
  }

  static const char* value(const ::supervisor::imgDataArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::supervisor::imgDataArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imgData[] images\n"
"================================================================================\n"
"MSG: supervisor/imgData\n"
"\n"
"  int32 upperleft\n"
"  int32 lowerRight\n"
"  string color\n"
"  string cameraID\n"
;
  }

  static const char* value(const ::supervisor::imgDataArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::supervisor::imgDataArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.images);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imgDataArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::supervisor::imgDataArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::supervisor::imgDataArray_<ContainerAllocator>& v)
  {
    s << indent << "images[]" << std::endl;
    for (size_t i = 0; i < v.images.size(); ++i)
    {
      s << indent << "  images[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::supervisor::imgData_<ContainerAllocator> >::stream(s, indent + "    ", v.images[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUPERVISOR_MESSAGE_IMGDATAARRAY_H
