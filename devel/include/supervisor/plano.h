// Generated by gencpp from file supervisor/plano.msg
// DO NOT EDIT!


#ifndef SUPERVISOR_MESSAGE_PLANO_H
#define SUPERVISOR_MESSAGE_PLANO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace supervisor
{
template <class ContainerAllocator>
struct plano_
{
  typedef plano_<ContainerAllocator> Type;

  plano_()
    : upperleft(0)
    , lowerRight(0)
    , color()
    , cameraID()  {
    }
  plano_(const ContainerAllocator& _alloc)
    : upperleft(0)
    , lowerRight(0)
    , color(_alloc)
    , cameraID(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _upperleft_type;
  _upperleft_type upperleft;

   typedef int32_t _lowerRight_type;
  _lowerRight_type lowerRight;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _color_type;
  _color_type color;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cameraID_type;
  _cameraID_type cameraID;





  typedef boost::shared_ptr< ::supervisor::plano_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::supervisor::plano_<ContainerAllocator> const> ConstPtr;

}; // struct plano_

typedef ::supervisor::plano_<std::allocator<void> > plano;

typedef boost::shared_ptr< ::supervisor::plano > planoPtr;
typedef boost::shared_ptr< ::supervisor::plano const> planoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::supervisor::plano_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::supervisor::plano_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::supervisor::plano_<ContainerAllocator1> & lhs, const ::supervisor::plano_<ContainerAllocator2> & rhs)
{
  return lhs.upperleft == rhs.upperleft &&
    lhs.lowerRight == rhs.lowerRight &&
    lhs.color == rhs.color &&
    lhs.cameraID == rhs.cameraID;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::supervisor::plano_<ContainerAllocator1> & lhs, const ::supervisor::plano_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace supervisor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::supervisor::plano_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::supervisor::plano_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::supervisor::plano_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::supervisor::plano_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::supervisor::plano_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::supervisor::plano_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::supervisor::plano_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01ffaf0e26fa935372f1b74d92aa2818";
  }

  static const char* value(const ::supervisor::plano_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01ffaf0e26fa9353ULL;
  static const uint64_t static_value2 = 0x72f1b74d92aa2818ULL;
};

template<class ContainerAllocator>
struct DataType< ::supervisor::plano_<ContainerAllocator> >
{
  static const char* value()
  {
    return "supervisor/plano";
  }

  static const char* value(const ::supervisor::plano_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::supervisor::plano_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"  int32 upperleft\n"
"  int32 lowerRight\n"
"  string color\n"
"  string cameraID\n"
;
  }

  static const char* value(const ::supervisor::plano_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::supervisor::plano_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.upperleft);
      stream.next(m.lowerRight);
      stream.next(m.color);
      stream.next(m.cameraID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct plano_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::supervisor::plano_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::supervisor::plano_<ContainerAllocator>& v)
  {
    s << indent << "upperleft: ";
    Printer<int32_t>::stream(s, indent + "  ", v.upperleft);
    s << indent << "lowerRight: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lowerRight);
    s << indent << "color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.color);
    s << indent << "cameraID: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cameraID);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUPERVISOR_MESSAGE_PLANO_H
